# -*- coding: utf-8 -*-
"""Mathematical Trading Strategies.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MNlue8JoGFSiTHLoxa8X9drimNmSiAAd
"""

# Mathematical Trading Strategies
# Author: Pranav Ajay Choudhari
# Description: Data-driven trading strategies using technical indicators, chart patterns, and statistical metrics.
# Indicators implemented manually (no external TA libraries).

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.linear_model import LinearRegression

# -----------------------------
# 1. Data Sourcing
# -----------------------------
ticker = "AAPL"  # Example stock
df = yf.download(ticker, start="2023-01-01", end="2024-01-01", interval="1d")

# -----------------------------
# 2. Technical Indicators
# -----------------------------

# SMA
df['SMA50'] = df['Close'].rolling(50).mean()
df['SMA200'] = df['Close'].rolling(200).mean()

# Bollinger Bands
df['BB_Mid'] = df['Close'].rolling(20).mean()
df['BB_Std'] = df['Close'].rolling(20).std()
df['BB_Upper'] = df['BB_Mid'] + 2*df['BB_Std']
df['BB_Lower'] = df['BB_Mid'] - 2*df['BB_Std']

# Keltner Channel
df['EMA20'] = df['Close'].ewm(span=20, adjust=False).mean()
df['TR'] = df[['High','Low','Close']].max(axis=1) - df[['High','Low','Close']].min(axis=1)
df['ATR'] = df['TR'].rolling(20).mean()
df['KC_Upper'] = df['EMA20'] + 2*df['ATR']
df['KC_Lower'] = df['EMA20'] - 2*df['ATR']

# MACD
df['EMA12'] = df['Close'].ewm(span=12, adjust=False).mean()
df['EMA26'] = df['Close'].ewm(span=26, adjust=False).mean()
df['MACD'] = df['EMA12'] - df['EMA26']
df['MACD_Signal'] = df['MACD'].ewm(span=9, adjust=False).mean()

# -----------------------------
# 3. Buy/Sell Signal: SMA Crossover
# -----------------------------
df['Signal'] = np.where(df['SMA50'] > df['SMA200'], 1, -1)

# -----------------------------
# 4. Chart Pattern Detection
# -----------------------------

def detect_double_top_bottom(prices, window=20, tolerance=0.02):
    patterns = []
    for i in range(window, len(prices)-window):
        left = prices[i-window:i]
        right = prices[i+1:i+window+1]
        if abs(prices[i] - max(left)) < tolerance*prices[i] and abs(prices[i] - max(right)) < tolerance*prices[i]:
            patterns.append(('Double Top', i))
        elif abs(prices[i] - min(left)) < tolerance*prices[i] and abs(prices[i] - min(right)) < tolerance*prices[i]:
            patterns.append(('Double Bottom', i))
    return patterns

def detect_head_and_shoulders(prices, window=20, tolerance=0.02):
    patterns = []
    for i in range(window, len(prices)-window-2):
        left, head, right = prices[i], prices[i+1], prices[i+2]
        if head > left*(1+tolerance) and head > right*(1+tolerance) and abs(left-right) < tolerance*head:
            patterns.append(('Head and Shoulders', i+1))
    return patterns

def detect_triangles(prices, window=20, tolerance=0.02):
    patterns = []
    for i in range(window, len(prices)-window):
        local = prices[i-window:i+window]
        if max(local) - min(local) < tolerance*prices[i]:
            patterns.append(('Triangle', i))
    return patterns

patterns = []
patterns.extend(detect_double_top_bottom(df['Close'].values))
patterns.extend(detect_head_and_shoulders(df['Close'].values))
patterns.extend(detect_triangles(df['Close'].values))

for p in patterns:
    print(f"Pattern Detected: {p[0]} at index {p[1]}")

# -----------------------------
# 5. Strategy Backtest
# -----------------------------
df['Returns'] = df['Close'].pct_change()
df['Strategy'] = df['Signal'].shift(1) * df['Returns']

cumulative_market = (1 + df['Returns']).cumprod()
cumulative_strategy = (1 + df['Strategy']).cumprod()

# CAPM Beta calculation (regress Strategy vs Market returns)
X = df['Returns'].fillna(0).values.reshape(-1,1)
y = df['Strategy'].fillna(0).values.reshape(-1,1)
reg = LinearRegression().fit(X, y)
beta = reg.coef_[0][0]
print(f"Strategy Beta vs Market: {beta:.3f}")

# -----------------------------
# 6. Visualization
# -----------------------------
plt.figure(figsize=(12,6))
plt.plot(cumulative_market, label='Market Returns', color='blue')
plt.plot(cumulative_strategy, label='Strategy Returns', color='red')

# Mark detected patterns
for p in patterns:
    plt.scatter(df.index[p[1]], df['Close'].iloc[p[1]],
                color='green' if "Bottom" in p[0] else 'orange',
                label=p[0], marker='^' if "Bottom" in p[0] else 'v')

plt.legend()
plt.title(f"Trading Strategy with Indicators, Patterns & Beta ({ticker})")
plt.show()

# -----------------------------
# 7. Performance Metrics
# -----------------------------
alpha = reg.intercept_[0]

# Sharpe Ratio (using daily returns, risk-free assumed 0 for simplicity)
sharpe_ratio = (df['Strategy'].mean() / df['Strategy'].std()) * np.sqrt(252)

# Max Drawdown
cum_returns = (1 + df['Strategy']).cumprod()
rolling_max = cum_returns.cummax()
drawdown = (cum_returns - rolling_max) / rolling_max
max_drawdown = drawdown.min()

print(f"Alpha: {alpha:.4f}")
print(f"Beta: {beta:.4f}")
print(f"Sharpe Ratio: {sharpe_ratio:.2f}")
print(f"Max Drawdown: {max_drawdown:.2%}")

# Save results
df.to_csv("trading_strategy_results.csv")